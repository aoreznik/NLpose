dimensions.genetic.states[code].predicate
sum(count("CYP2C9", "*1"),count("CYP2C9", "*9")) == 2
or(and(sum(count("CYP2C9", "*1"),count("CYP2C9", "*9")) == 1,sum(count("CYP2C9", "*6"),count("CYP2C9", "*15"),count("CYP2C9", "*25")) == 1),and(sum(count("CYP2C9", "*1"),count("CYP2C9", "*9")) == 1,sum(count("CYP2C9", "*2"),count("CYP2C9", "*3")) == 1))
and(sum(count("CYP2C9", "*1"),count("CYP2C9", "*9")) == 1,sum(count("CYP2C9", "*4"),count("CYP2C9", "*5"),count("CYP2C9", "*8"),count("CYP2C9", "*11"),count("CYP2C9", "*12"),count("CYP2C9", "*13"),count("CYP2C9", "*31")) == 1)
or(sum(count("CYP2C9", "*6"),count("CYP2C9", "*15"),count("CYP2C9", "*25")) == 2,sum(count("CYP2C9", "*2"),count("CYP2C9", "*3")) == 2,and(sum(count("CYP2C9", "*6"),count("CYP2C9", "*15"),count("CYP2C9", "*25")) == 1,sum(count("CYP2C9", "*2"),count("CYP2C9", "*3")) == 1))
or(sum(count("CYP2C9", "*4"),count("CYP2C9", "*5"),count("CYP2C9", "*8"),count("CYP2C9", "*11"),count("CYP2C9", "*12"),count("CYP2C9", "*13"),count("CYP2C9", "*31")) == 2,and(sum(count("CYP2C9", "*6"),count("CYP2C9", "*15"),count("CYP2C9", "*25")) == 1,sum(count("CYP2C9", "*4"),count("CYP2C9", "*5"),count("CYP2C9", "*8"),count("CYP2C9", "*11"),count("CYP2C9", "*12"),count("CYP2C9", "*13"),count("CYP2C9", "*31")) == 1),and(sum(count("CYP2C9", "*2"),count("CYP2C9", "*3")) == 1,sum(count("CYP2C9", "*4"),count("CYP2C9", "*5"),count("CYP2C9", "*8"),count("CYP2C9", "*11"),count("CYP2C9", "*12"),count("CYP2C9", "*13"),count("CYP2C9", "*31")) == 1))
sum(count("CYP2C9", "*7"),count("CYP2C9", "*10"),count("CYP2C9", "*14"),count("CYP2C9", "*16"),count("CYP2C9", "*17"),count("CYP2C9", "*18"),count("CYP2C9", "*19"),count("CYP2C9", "*20"),count("CYP2C9", "*21"),count("CYP2C9", "*22"),count("CYP2C9", "*23"),count("CYP2C9", "*24"),count("CYP2C9", "*26"),count("CYP2C9", "*27"),count("CYP2C9", "*28"),count("CYP2C9", "*29"),count("CYP2C9", "*30"),count("CYP2C9", "*32"),count("CYP2C9", "*33"),count("CYP2C9", "*34"),count("CYP2C9", "*35"),count("CYP2C9", "*36"),count("CYP2C9", "*37"),count("CYP2C9", "*38"),count("CYP2C9", "*39"),count("CYP2C9", "*40"),count("CYP2C9", "*41"),count("CYP2C9", "*42"),count("CYP2C9", "*43"),count("CYP2C9", "*44"),count("CYP2C9", "*45"),count("CYP2C9", "*46"),count("CYP2C9", "*47"),count("CYP2C9", "*48"),count("CYP2C9", "*49"),count("CYP2C9", "*50"),count("CYP2C9", "*51"),count("CYP2C9", "*52"),count("CYP2C9", "*53"),count("CYP2C9", "*54"),count("CYP2C9", "*55"),count("CYP2C9", "*56"),count("CYP2C9", "*57"),count("CYP2C9", "*58"),count("CYP2C9", "*59"),count("CYP2C9", "*60")) >= 1
not(or(CYP2C9_metabolizer.NM,CYP2C9_metabolizer.IM,CYP2C9_metabolizer.pIM,CYP2C9_metabolizer.PM,CYP2C9_metabolizer.pPM,CYP2C9_metabolizer.unknown))
sum(count("CYP2C19", "*1"),count("CYP2C19", "*11"),count("CYP2C19", "*13"),count("CYP2C19", "*15"),count("CYP2C19", "*18"),count("CYP2C19", "*28")) == 2
or(and(sum(count("CYP2C19", "*1"),count("CYP2C19", "*11"),count("CYP2C19", "*13"),count("CYP2C19", "*15"),count("CYP2C19", "*18"),count("CYP2C19", "*28")) == 1,sum(count("CYP2C19", "*2"),count("CYP2C19", "*3"),count("CYP2C19", "*4A"),count("CYP2C19", "*4B"),count("CYP2C19", "*5"),count("CYP2C19", "*6"),count("CYP2C19", "*7"),count("CYP2C19", "*8"),count("CYP2C19", "*22"),count("CYP2C19", "*24"),count("CYP2C19", "*35")) == 1),and(sum(count("CYP2C19", "*17")) == 1,sum(count("CYP2C19", "*2"),count("CYP2C19", "*3"),count("CYP2C19", "*4A"),count("CYP2C19", "*4B"),count("CYP2C19", "*5"),count("CYP2C19", "*6"),count("CYP2C19", "*7"),count("CYP2C19", "*8"),count("CYP2C19", "*22"),count("CYP2C19", "*24"),count("CYP2C19", "*35")) == 1))
or(and(sum(count("CYP2C19", "*9"),count("CYP2C19", "*10"),count("CYP2C19", "*16"),count("CYP2C19", "*19"),count("CYP2C19", "*25"),count("CYP2C19", "*26")) == 1,sum(count("CYP2C19", "*1"),count("CYP2C19", "*11"),count("CYP2C19", "*13"),count("CYP2C19", "*15"),count("CYP2C19", "*18"),count("CYP2C19", "*28")) == 1),sum(count("CYP2C19", "*9"),count("CYP2C19", "*10"),count("CYP2C19", "*16"),count("CYP2C19", "*19"),count("CYP2C19", "*25"),count("CYP2C19", "*26")) == 2,and(sum(count("CYP2C19", "*9"),count("CYP2C19", "*10"),count("CYP2C19", "*16"),count("CYP2C19", "*19"),count("CYP2C19", "*25"),count("CYP2C19", "*26")) == 1,sum(count("CYP2C19", "*17")) == 1))
sum(count("CYP2C19", "*2"),count("CYP2C19", "*3"),count("CYP2C19", "*4A"),count("CYP2C19", "*4B"),count("CYP2C19", "*5"),count("CYP2C19", "*6"),count("CYP2C19", "*7"),count("CYP2C19", "*8"),count("CYP2C19", "*22"),count("CYP2C19", "*24"),count("CYP2C19", "*35")) == 2
and(sum(count("CYP2C19", "*2"),count("CYP2C19", "*3"),count("CYP2C19", "*4A"),count("CYP2C19", "*4B"),count("CYP2C19", "*5"),count("CYP2C19", "*6"),count("CYP2C19", "*7"),count("CYP2C19", "*8"),count("CYP2C19", "*22"),count("CYP2C19", "*24"),count("CYP2C19", "*35")) == 1,sum(count("CYP2C19", "*9"),count("CYP2C19", "*10"),count("CYP2C19", "*16"),count("CYP2C19", "*19"),count("CYP2C19", "*25"),count("CYP2C19", "*26")) == 1)
and(sum(count("CYP2C19", "*17")) == 1,sum(count("CYP2C19", "*1"),count("CYP2C19", "*11"),count("CYP2C19", "*13"),count("CYP2C19", "*15"),count("CYP2C19", "*18"),count("CYP2C19", "*28")) == 1)
sum(count("CYP2C19", "*17")) == 2
sum(count("CYP2C19", "*12"),count("CYP2C19", "*14"),count("CYP2C19", "*23"),count("CYP2C19", "*27"),count("CYP2C19", "*29"),count("CYP2C19", "*30"),count("CYP2C19", "*31"),count("CYP2C19", "*32"),count("CYP2C19", "*33"),count("CYP2C19", "*34")) >= 1
not(or(CYP2C19_metabolizer.NM,CYP2C19_metabolizer.IM,CYP2C19_metabolizer.pIM,CYP2C19_metabolizer.PM,CYP2C19_metabolizer.pPM,CYP2C19_metabolizer.RM,CYP2C19_metabolizer.UM,CYP2C19_metabolizer.unknown))
sum(count("CYP3A5", "*1")) == 2
and(sum(count("CYP3A5", "*1")) == 1,sum(count("CYP3A5", "*3"),count("CYP3A5", "*6"),count("CYP3A5", "*7")) == 1)
and(sum(count("CYP3A5", "*1")) == 1,sum(count("CYP3A5", "*2"),count("CYP3A5", "*4"),count("CYP3A5", "*5"),count("CYP3A5", "*8"),count("CYP3A5", "*9")) == 1)
sum(count("CYP3A5", "*3"),count("CYP3A5", "*6"),count("CYP3A5", "*7")) == 2
and(sum(count("CYP3A5", "*2"),count("CYP3A5", "*4"),count("CYP3A5", "*5"),count("CYP3A5", "*8"),count("CYP3A5", "*9")) >= 1,sum(count("CYP3A5", "*1")) == 0)
not(or(CYP3A5_metabolizer.NM,CYP3A5_metabolizer.IM,CYP3A5_metabolizer.pIM,CYP3A5_metabolizer.PM,CYP3A5_metabolizer.unknown))
sum(count("TPMT", "*1")) == 2
and(sum(count("TPMT", "*1")) == 1,sum(count("TPMT", "*2"),count("TPMT", "*3A"),count("TPMT", "*3B"),count("TPMT", "*3C"),count("TPMT", "*4"),count("TPMT", "*11"),count("TPMT", "*14"),count("TPMT", "*15"),count("TPMT", "*23"),count("TPMT", "*29"),count("TPMT", "*41")) == 1)
sum(count("TPMT", "*2"),count("TPMT", "*3A"),count("TPMT", "*3B"),count("TPMT", "*3C"),count("TPMT", "*4"),count("TPMT", "*11"),count("TPMT", "*14"),count("TPMT", "*15"),count("TPMT", "*23"),count("TPMT", "*29"),count("TPMT", "*41")) == 2
sum(count("TPMT", "*5"),count("TPMT", "*6"),count("TPMT", "*7"),count("TPMT", "*8"),count("TPMT", "*9"),count("TPMT", "*10"),count("TPMT", "*12"),count("TPMT", "*13"),count("TPMT", "*16"),count("TPMT", "*17"),count("TPMT", "*18"),count("TPMT", "*19"),count("TPMT", "*20"),count("TPMT", "*21"),count("TPMT", "*22"),count("TPMT", "*24"),count("TPMT", "*25"),count("TPMT", "*26"),count("TPMT", "*27"),count("TPMT", "*28"),count("TPMT", "*30"),count("TPMT", "*31"),count("TPMT", "*32"),count("TPMT", "*33"),count("TPMT", "*34"),count("TPMT", "*35"),count("TPMT", "*36"),count("TPMT", "*37"),count("TPMT", "*38"),count("TPMT", "*39"),count("TPMT", "*40")) >= 1
not(or(TPMT_metabolizer.NM,TPMT_metabolizer.IM,TPMT_metabolizer.PM,TPMT_metabolizer.unknown))
or(sum(count("UGT1A1", "*1"),count("UGT1A1", "*60")) == 2,sum(count("UGT1A1", "*36")) == 2,and(count("UGT1A1", "*36") == 1,sum(count("UGT1A1", "*1"),count("UGT1A1", "*60")) == 1))
and(sum(count("UGT1A1", "*1"),count("UGT1A1", "*36"),count("UGT1A1", "*60")) == 1,sum(count("UGT1A1", "*6"),count("UGT1A1", "*27"),count("UGT1A1", "*28"),count("UGT1A1", "*37"),count("UGT1A1", "*80"),count("UGT1A1", "*80+28"),count("UGT1A1", "*80+37")) == 1)
sum(count("UGT1A1", "*6"),count("UGT1A1", "*27"),count("UGT1A1", "*28"),count("UGT1A1", "*37"),count("UGT1A1", "*80"),count("UGT1A1", "*80+28"),count("UGT1A1", "*80+37")) == 2
not(or(UGT1A1_metabolizer.NM,UGT1A1_metabolizer.IM,UGT1A1_metabolizer.PM))
sum(count("SLCO1B1", "*1A"),count("SLCO1B1", "*1B")) == 2
and(sum(count("SLCO1B1", "*1A"),count("SLCO1B1", "*1B")) == 1,sum(count("SLCO1B1", "*5"),count("SLCO1B1", "*15"),count("SLCO1B1", "*17")) == 1)
and(sum(count("SLCO1B1", "*1A"),count("SLCO1B1", "*1B")) == 1,sum(count("SLCO1B1", "*2"),count("SLCO1B1", "*3"),count("SLCO1B1", "*6"),count("SLCO1B1", "*9"),count("SLCO1B1", "*10"),count("SLCO1B1", "*23"),count("SLCO1B1", "*31")) == 1)
sum(count("SLCO1B1", "*5"),count("SLCO1B1", "*15"),count("SLCO1B1", "*17")) == 2
or(sum(count("SLCO1B1", "*2"),count("SLCO1B1", "*3"),count("SLCO1B1", "*6"),count("SLCO1B1", "*9"),count("SLCO1B1", "*10"),count("SLCO1B1", "*23"),count("SLCO1B1", "*31")) == 2,and(sum(count("SLCO1B1", "*2"),count("SLCO1B1", "*3"),count("SLCO1B1", "*6"),count("SLCO1B1", "*9"),count("SLCO1B1", "*10"),count("SLCO1B1", "*23"),count("SLCO1B1", "*31")) == 1,sum(count("SLCO1B1", "*5"),count("SLCO1B1", "*15"),count("SLCO1B1", "*17")) == 1))
or(sum(count("SLCO1B1", "*14"),count("SLCO1B1", "*35")) == 2,and(sum(count("SLCO1B1", "*14"),count("SLCO1B1", "*35")) == 1,sum(count("SLCO1B1", "*1A"),count("SLCO1B1", "*1B")) == 1))
or(sum(count("SLCO1B1", "*4"),count("SLCO1B1", "*7"),count("SLCO1B1", "*8"),count("SLCO1B1", "*11"),count("SLCO1B1", "*12"),count("SLCO1B1", "*13"),count("SLCO1B1", "*16"),count("SLCO1B1", "*18"),count("SLCO1B1", "*19"),count("SLCO1B1", "*20"),count("SLCO1B1", "*21"),count("SLCO1B1", "*22"),count("SLCO1B1", "*24"),count("SLCO1B1", "*25"),count("SLCO1B1", "*26"),count("SLCO1B1", "*27"),count("SLCO1B1", "*28"),count("SLCO1B1", "*29"),count("SLCO1B1", "*30"),count("SLCO1B1", "*32"),count("SLCO1B1", "*33"),count("SLCO1B1", "*34"),count("SLCO1B1", "*36")) >= 1,and(sum(count("SLCO1B1", "*14"),count("SLCO1B1", "*35")) == 1,sum(count("SLCO1B1", "*2"),count("SLCO1B1", "*3"),count("SLCO1B1", "*6"),count("SLCO1B1", "*9"),count("SLCO1B1", "*10"),count("SLCO1B1", "*23"),count("SLCO1B1", "*31"),count("SLCO1B1", "*5"),count("SLCO1B1", "*15"),count("SLCO1B1", "*17")) == 1))
not(or(SLCO1B1_metabolizer.NM,SLCO1B1_metabolizer.IM,SLCO1B1_metabolizer.pIM,SLCO1B1_metabolizer.PM,SLCO1B1_metabolizer.pPM,SLCO1B1_metabolizer.pRM))
or(sum(count("CYP2D6", "*1A"),count("CYP2D6", "*1B"),count("CYP2D6", "*1C"),count("CYP2D6", "*1D"),count("CYP2D6", "*1E"),count("CYP2D6", "*2A"),count("CYP2D6", "*2B"),count("CYP2D6", "*2C"),count("CYP2D6", "*2D"),count("CYP2D6", "*2E"),count("CYP2D6", "*2F"),count("CYP2D6", "*2G"),count("CYP2D6", "*2H"),count("CYP2D6", "*2K"),count("CYP2D6", "*2L"),count("CYP2D6", "*2M"),count("CYP2D6", "*27"),count("CYP2D6", "*33"),count("CYP2D6", "*34"),count("CYP2D6", "*35A"),count("CYP2D6", "*35B"),count("CYP2D6", "*39"),count("CYP2D6", "*45A"),count("CYP2D6", "*45B"),count("CYP2D6", "*46A"),count("CYP2D6", "*46B"),count("CYP2D6", "*48"),count("CYP2D6", "*53")) == 2,and(sum(count("CYP2D6", "*1A"),count("CYP2D6", "*1B"),count("CYP2D6", "*1C"),count("CYP2D6", "*1D"),count("CYP2D6", "*1E"),count("CYP2D6", "*2A"),count("CYP2D6", "*2B"),count("CYP2D6", "*2C"),count("CYP2D6", "*2D"),count("CYP2D6", "*2E"),count("CYP2D6", "*2F"),count("CYP2D6", "*2G"),count("CYP2D6", "*2H"),count("CYP2D6", "*2K"),count("CYP2D6", "*2L"),count("CYP2D6", "*2M"),count("CYP2D6", "*27"),count("CYP2D6", "*33"),count("CYP2D6", "*34"),count("CYP2D6", "*35A"),count("CYP2D6", "*35B"),count("CYP2D6", "*39"),count("CYP2D6", "*45A"),count("CYP2D6", "*45B"),count("CYP2D6", "*46A"),count("CYP2D6", "*46B"),count("CYP2D6", "*48"),count("CYP2D6", "*53")) == 1,sum(count("CYP2D6", "*9"),count("CYP2D6", "*10A"),count("CYP2D6", "*10B"),count("CYP2D6", "*10D"),count("CYP2D6", "*14"),count("CYP2D6", "*17"),count("CYP2D6", "*29"),count("CYP2D6", "*41"),count("CYP2D6", "*49"),count("CYP2D6", "*50"),count("CYP2D6", "*54"),count("CYP2D6", "*55"),count("CYP2D6", "*59"),count("CYP2D6", "*72"),count("CYP2D6", "*84")) == 1))
or(sum(count("CYP2D6", "*9"),count("CYP2D6", "*10A"),count("CYP2D6", "*10B"),count("CYP2D6", "*10D"),count("CYP2D6", "*14"),count("CYP2D6", "*17"),count("CYP2D6", "*29"),count("CYP2D6", "*41"),count("CYP2D6", "*49"),count("CYP2D6", "*50"),count("CYP2D6", "*54"),count("CYP2D6", "*55"),count("CYP2D6", "*59"),count("CYP2D6", "*72"),count("CYP2D6", "*84")) == 2,and(sum(count("CYP2D6", "*1A"),count("CYP2D6", "*1B"),count("CYP2D6", "*1C"),count("CYP2D6", "*1D"),count("CYP2D6", "*1E"),count("CYP2D6", "*2A"),count("CYP2D6", "*2B"),count("CYP2D6", "*2C"),count("CYP2D6", "*2D"),count("CYP2D6", "*2E"),count("CYP2D6", "*2F"),count("CYP2D6", "*2G"),count("CYP2D6", "*2H"),count("CYP2D6", "*2K"),count("CYP2D6", "*2L"),count("CYP2D6", "*2M"),count("CYP2D6", "*27"),count("CYP2D6", "*33"),count("CYP2D6", "*34"),count("CYP2D6", "*35A"),count("CYP2D6", "*35B"),count("CYP2D6", "*39"),count("CYP2D6", "*45A"),count("CYP2D6", "*45B"),count("CYP2D6", "*46A"),count("CYP2D6", "*46B"),count("CYP2D6", "*48"),count("CYP2D6", "*53")) == 1,sum(count("CYP2D6", "*3A"),count("CYP2D6", "*3B"),count("CYP2D6", "*4A"),count("CYP2D6", "*4B"),count("CYP2D6", "*4C"),count("CYP2D6", "*4D"),count("CYP2D6", "*4E"),count("CYP2D6", "*4F"),count("CYP2D6", "*4G"),count("CYP2D6", "*4H"),count("CYP2D6", "*4J"),count("CYP2D6", "*4K"),count("CYP2D6", "*4L"),count("CYP2D6", "*4M"),count("CYP2D6", "*4N"),count("CYP2D6", "*4P"),count("CYP2D6", "*6A"),count("CYP2D6", "*6B"),count("CYP2D6", "*6C"),count("CYP2D6", "*6D"),count("CYP2D6", "*7"),count("CYP2D6", "*8"),count("CYP2D6", "*11A"),count("CYP2D6", "*11B"),count("CYP2D6", "*12"),count("CYP2D6", "*15"),count("CYP2D6", "*18"),count("CYP2D6", "*19"),count("CYP2D6", "*20"),count("CYP2D6", "*21A"),count("CYP2D6", "*21B"),count("CYP2D6", "*31"),count("CYP2D6", "*36"),count("CYP2D6", "*38"),count("CYP2D6", "*40"),count("CYP2D6", "*42"),count("CYP2D6", "*44"),count("CYP2D6", "*47"),count("CYP2D6", "*51"),count("CYP2D6", "*56A"),count("CYP2D6", "*56B"),count("CYP2D6", "*57"),count("CYP2D6", "*60"),count("CYP2D6", "*62"),count("CYP2D6", "*69"),count("CYP2D6", "*92"),count("CYP2D6", "*96"),count("CYP2D6", "*99"),count("CYP2D6", "*100"),count("CYP2D6", "*101"),count("CYP2D6", "*114")) == 1))
and(sum(count("CYP2D6", "*3A"),count("CYP2D6", "*3B"),count("CYP2D6", "*4A"),count("CYP2D6", "*4B"),count("CYP2D6", "*4C"),count("CYP2D6", "*4D"),count("CYP2D6", "*4E"),count("CYP2D6", "*4F"),count("CYP2D6", "*4G"),count("CYP2D6", "*4H"),count("CYP2D6", "*4J"),count("CYP2D6", "*4K"),count("CYP2D6", "*4L"),count("CYP2D6", "*4M"),count("CYP2D6", "*4N"),count("CYP2D6", "*4P"),count("CYP2D6", "*6A"),count("CYP2D6", "*6B"),count("CYP2D6", "*6C"),count("CYP2D6", "*6D"),count("CYP2D6", "*7"),count("CYP2D6", "*8"),count("CYP2D6", "*11A"),count("CYP2D6", "*11B"),count("CYP2D6", "*12"),count("CYP2D6", "*15"),count("CYP2D6", "*18"),count("CYP2D6", "*19"),count("CYP2D6", "*20"),count("CYP2D6", "*21A"),count("CYP2D6", "*21B"),count("CYP2D6", "*31"),count("CYP2D6", "*36"),count("CYP2D6", "*38"),count("CYP2D6", "*40"),count("CYP2D6", "*42"),count("CYP2D6", "*44"),count("CYP2D6", "*47"),count("CYP2D6", "*51"),count("CYP2D6", "*56A"),count("CYP2D6", "*56B"),count("CYP2D6", "*57"),count("CYP2D6", "*60"),count("CYP2D6", "*62")count("CYP2D6", "*69"),count("CYP2D6", "*92"),count("CYP2D6", "*96"),count("CYP2D6", "*99"),count("CYP2D6", "*100"),count("CYP2D6", "*101"),count("CYP2D6", "*114") ) == 1,sum(count("CYP2D6", "*9"),count("CYP2D6", "*10A"),count("CYP2D6", "*10B"),count("CYP2D6", "*10D"),count("CYP2D6", "*14"),count("CYP2D6", "*17"),count("CYP2D6", "*29"),count("CYP2D6", "*41"),count("CYP2D6", "*49"),count("CYP2D6", "*50"),count("CYP2D6", "*54"),count("CYP2D6", "*55"),count("CYP2D6", "*59"),count("CYP2D6", "*72"),count("CYP2D6", "*84") ) == 1)
sum(count("CYP2D6", "*3A"),count("CYP2D6", "*3B"),count("CYP2D6", "*4A"),count("CYP2D6", "*4B"),count("CYP2D6", "*4C"),count("CYP2D6", "*4D"),count("CYP2D6", "*4E"),count("CYP2D6", "*4F"),count("CYP2D6", "*4G"),count("CYP2D6", "*4H"),count("CYP2D6", "*4J"),count("CYP2D6", "*4K"),count("CYP2D6", "*4L"),count("CYP2D6", "*4M"),count("CYP2D6", "*4N"),count("CYP2D6", "*4P"),count("CYP2D6", "*6A"),count("CYP2D6", "*6B"),count("CYP2D6", "*6C"),count("CYP2D6", "*6D"),count("CYP2D6", "*7"),count("CYP2D6", "*8"),count("CYP2D6", "*11A"),count("CYP2D6", "*11B"),count("CYP2D6", "*12"),count("CYP2D6", "*15"),count("CYP2D6", "*18"),count("CYP2D6", "*19"),count("CYP2D6", "*20"),count("CYP2D6", "*21A"),count("CYP2D6", "*21B"),count("CYP2D6", "*31"),count("CYP2D6", "*36"),count("CYP2D6", "*38"),count("CYP2D6", "*40"),count("CYP2D6", "*42"),count("CYP2D6", "*44"),count("CYP2D6", "*47"),count("CYP2D6", "*51"),count("CYP2D6", "*56A"),count("CYP2D6", "*56B"),count("CYP2D6", "*57"),count("CYP2D6", "*60"),count("CYP2D6", "*62"),count("CYP2D6", "*69"),count("CYP2D6", "*92"),count("CYP2D6", "*96"),count("CYP2D6", "*99"),count("CYP2D6", "*100"),count("CYP2D6", "*101"),count("CYP2D6", "*114")) == 2
sum(count("CYP2D6", "*22"),count("CYP2D6", "*23"),count("CYP2D6", "*24"),count("CYP2D6", "*25"),count("CYP2D6", "*26"),count("CYP2D6", "*28"),count("CYP2D6", "*30"),count("CYP2D6", "*32"),count("CYP2D6", "*37"),count("CYP2D6", "*43"),count("CYP2D6", "*52"),count("CYP2D6", "*58"),count("CYP2D6", "*64"),count("CYP2D6", "*65"),count("CYP2D6", "*70"),count("CYP2D6", "*71"),count("CYP2D6", "*73"),count("CYP2D6", "*74"),count("CYP2D6", "*75"),count("CYP2D6", "*81"),count("CYP2D6", "*82"),count("CYP2D6", "*83"),count("CYP2D6", "*85"),count("CYP2D6", "*86"),count("CYP2D6", "*87"),count("CYP2D6", "*88"),count("CYP2D6", "*89"),count("CYP2D6", "*90"),count("CYP2D6", "*91"),count("CYP2D6", "*93"),count("CYP2D6", "*94A"),count("CYP2D6", "*94B"),count("CYP2D6", "*95"),count("CYP2D6", "*97"),count("CYP2D6", "*98"),count("CYP2D6", "*102"),count("CYP2D6", "*103"),count("CYP2D6", "*104"),count("CYP2D6", "*105"),count("CYP2D6", "*106"),count("CYP2D6", "*107"),count("CYP2D6", "*108"),count("CYP2D6", "*109"),count("CYP2D6", "*110"),count("CYP2D6", "*111"),count("CYP2D6", "*112"),count("CYP2D6", "*113")) >= 1
not(or(CYP2D6_metabolizer.activityOneAndHalf,CYP2D6_metabolizer.activityOne,CYP2D6_metabolizer.activityHalf,CYP2D6_metabolizer.activityZero,CYP2D6_metabolizer.unknown))
or(and(gender.male,sum(count("G6PD", "B_wildtype"),count("G6PD", "Sao_Borja"),count("G6PD", "Insuli"),count("G6PD", "A"),count("G6PD", "Mira_d_Aire")) == 1),and(gender.female,sum(count("G6PD", "B_wildtype"),count("G6PD", "Sao_Borja"),count("G6PD", "Insuli"),count("G6PD", "A"),count("G6PD", "Mira_d_Aire")) == 2))
or(and(gender.female,sum(count("G6PD", "Sinnai"),count("G6PD", "Lages"),count("G6PD", "Gaohe"),count("G6PD", "Rignano"),count("G6PD", "Orissa"),count("G6PD", "Aures"),count("G6PD", "Kambos"),count("G6PD", "Kamogawa"),count("G6PD", "Palestrina"),count("G6PD", "Metaponto"),count("G6PD", "Costanzo"),count("G6PD", "Amazonia"),count("G6PD", "Musashino"),count("G6PD", "Songklanagarind"),count("G6PD", "Asahi"),count("G6PD", "Hechi"),count("G6PD", "A_202A_376G"),count("G6PD", "Namouru"),count("G6PD", "Murcia_Oristano"),count("G6PD", "Ube_Konan"),count("G6PD", "Lagosanto"),count("G6PD", "Malaga"),count("G6PD", "Guangzhou"),count("G6PD", "Hammersmith"),count("G6PD", "Bao_Loc"),count("G6PD", "Crispim"),count("G6PD", "Acrokorinthos"),count("G6PD", "Santa_Maria"),count("G6PD", "Ananindeua"),count("G6PD", "G6PD_A_680T_376G"),count("G6PD", "G6PD_A_968C_376G"),count("G6PD", "Vanua_Lava"),count("G6PD", "Salerno_Pyrgos"),count("G6PD", "Quing_Yan"),count("G6PD", "Valladolid"),count("G6PD", "Belem"),count("G6PD", "Liuzhou"),count("G6PD", "Ilesha"),count("G6PD", "Shenzen"),count("G6PD", "Mahidol"),count("G6PD", "Taipei_Chinese_3"),count("G6PD", "Toledo"),count("G6PD", "Naone"),count("G6PD", "Nankang"),count("G6PD", "Miaoli"),count("G6PD", "Malaga"),count("G6PD", "Mediterranean_Dallas_Panama_Sassari_Cagliari_Birmingham"),count("G6PD", "Coimbra_Shunde"),count("G6PD", "Nilgiri"),count("G6PD", "Sibari"),count("G6PD", "Radlowo"),count("G6PD", "Mexico_City"),count("G6PD", "Nanning"),count("G6PD", "Roubaix"),count("G6PD", "Haikou"),count("G6PD", "Chinese_1"),count("G6PD", "Seattle_Lodi_Modena_Ferrara_II_Athens_like"),count("G6PD", "Bajo_Maumere"),count("G6PD", "Mizushima"),count("G6PD", "Osaka"),count("G6PD", "Montalbano"),count("G6PD", "Viangchan_Jammu"),count("G6PD", "Seoul"),count("G6PD", "Ludhiana"),count("G6PD", "Kalyan_Kerala_Jamnaga_Rohini"),count("G6PD", "Farroupilha"),count("G6PD", "Chatham"),count("G6PD", "Fushan"),count("G6PD", "Chinese_5"),count("G6PD", "Partenope"),count("G6PD", "Ierapetra"),count("G6PD", "Anadia"),count("G6PD", "Abeno"),count("G6PD", "Surabaya"),count("G6PD", "Pawnee"),count("G6PD", "S_Antioco"),count("G6PD", "Cassano"),count("G6PD", "Hermoupolis"),count("G6PD", "Union_Maewo_Chinese_2_Kalo"),count("G6PD", "Andalus"),count("G6PD", "Cosenza"),count("G6PD", "Canton_Taiwan_Hakka_Gifu_like_Agrigento_like"),count("G6PD", "G6PDNice"),count("G6PD", "Kamiube_Keelung"),count("G6PD", "Flores"),count("G6PD", "Kaiping_Anant_Dhon_Sapporo_like_Wosera"),count("G6PD", "Neapolis"),count("G6PD", "Split"),count("G6PD", "Honiara"),count("G6PD", "Sunderland"),count("G6PD", "Kozukata"),count("G6PD", "Amsterdam"),count("G6PD", "202G_A_376A_G_1264C_G"),count("G6PD", "Swansea"),count("G6PD", "Urayasu"),count("G6PD", "Vancouver"),count("G6PD", "Mt_Sinai"),count("G6PD", "Plymouth"),count("G6PD", "Volendam"),count("G6PD", "Shinshu"),count("G6PD", "Chikugo"),count("G6PD", "Tsukui"),count("G6PD", "Pedoplis_Ckaro"),count("G6PD", "Santiago"),count("G6PD", "Minnesota_Marion_Gastonia_LeJeune"),count("G6PD", "Cincinnati"),count("G6PD", "Harilaou"),count("G6PD", "North_Dallas"),count("G6PD", "Asahikawa"),count("G6PD", "Durham"),count("G6PD", "Stonybrook"),count("G6PD", "Wayne"),count("G6PD", "Aveiro"),count("G6PD", "Cleveland_Corum"),count("G6PD", "Lille"),count("G6PD", "Bangkok"),count("G6PD", "Sugao"),count("G6PD", "La_Jolla"),count("G6PD", "Wexham"),count("G6PD", "Piotrkow"),count("G6PD", "West_Virginia"),count("G6PD", "Omiya"),count("G6PD", "Nara"),count("G6PD", "Manhattan"),count("G6PD", "Rehevot"),count("G6PD", "Villeurbanne"),count("G6PD", "Torun"),count("G6PD", "Iwatsuki"),count("G6PD", "Serres"),count("G6PD", "Tondela"),count("G6PD", "Loma_Linda"),count("G6PD", "Aachen"),count("G6PD", "Tenri"),count("G6PD", "Montpellier"),count("G6PD", "Calvo_Mackenna"),count("G6PD", "Riley"),count("G6PD", "Olomouc"),count("G6PD", "Tomah"),count("G6PD", "Lynwood"),count("G6PD", "Madrid"),count("G6PD", "Iowa_Walter_Reed_Springfield"),count("G6PD", "Guadalajara"),count("G6PD", "Beverly_Hills_Genova_Iwate_Niigata_Yamaguchi"),count("G6PD", "Hartford"),count("G6PD", "Praha"),count("G6PD", "Krakow"),count("G6PD", "Wisconsin"),count("G6PD", "Nashville_Anaheim_Portici"),count("G6PD", "Alhambra"),count("G6PD", "Bari"),count("G6PD", "Puerto_Limon"),count("G6PD", "Covao_do_Lobo"),count("G6PD", "Clinic"),count("G6PD", "Utrecht"),count("G6PD", "Suwalki"),count("G6PD", "Riverside"),count("G6PD", "Japan_Shinagawa"),count("G6PD", "Kawasaki"),count("G6PD", "Munich"),count("G6PD", "Tokyo_Fukushima"),count("G6PD", "Georgia"),count("G6PD", "Sumare"),count("G6PD", "Telti_Kobe"),count("G6PD", "Santiago_de_Cuba_Morioka"),count("G6PD", "Harima"),count("G6PD", "Figuera_da_Foz"),count("G6PD", "Amiens"),count("G6PD", "Bangkok_Noi"),count("G6PD", "Fukaya"),count("G6PD", "Campinas"),count("G6PD", "Buenos_Aires"),count("G6PD", "Arakawa"),count("G6PD", "Brighton")) == 2),and(gender.male,sum(count("G6PD", "Sinnai"),count("G6PD", "Lages"),count("G6PD", "Gaohe"),count("G6PD", "Rignano"),count("G6PD", "Orissa"),count("G6PD", "Aures"),count("G6PD", "Kambos"),count("G6PD", "Kamogawa"),count("G6PD", "Palestrina"),count("G6PD", "Metaponto"),count("G6PD", "Costanzo"),count("G6PD", "Amazonia"),count("G6PD", "Musashino"),count("G6PD", "Songklanagarind"),count("G6PD", "Asahi"),count("G6PD", "Hechi"),count("G6PD", "A_202A_376G"),count("G6PD", "Namouru"),count("G6PD", "Murcia_Oristano"),count("G6PD", "Ube_Konan"),count("G6PD", "Lagosanto"),count("G6PD", "Malaga"),count("G6PD", "Guangzhou"),count("G6PD", "Hammersmith"),count("G6PD", "Bao_Loc"),count("G6PD", "Crispim"),count("G6PD", "Acrokorinthos"),count("G6PD", "Santa_Maria"),count("G6PD", "Ananindeua"),count("G6PD", "G6PD_A_680T_376G"),count("G6PD", "G6PD_A_968C_376G"),count("G6PD", "Vanua_Lava"),count("G6PD", "Salerno_Pyrgos"),count("G6PD", "Quing_Yan"),count("G6PD", "Valladolid"),count("G6PD", "Belem"),count("G6PD", "Liuzhou"),count("G6PD", "Ilesha"),count("G6PD", "Shenzen"),count("G6PD", "Mahidol"),count("G6PD", "Taipei_Chinese_3"),count("G6PD", "Toledo"),count("G6PD", "Naone"),count("G6PD", "Nankang"),count("G6PD", "Miaoli"),count("G6PD", "Malaga"),count("G6PD", "Mediterranean_Dallas_Panama_Sassari_Cagliari_Birmingham"),count("G6PD", "Coimbra_Shunde"),count("G6PD", "Nilgiri"),count("G6PD", "Sibari"),count("G6PD", "Radlowo"),count("G6PD", "Mexico_City"),count("G6PD", "Nanning"),count("G6PD", "Roubaix"),count("G6PD", "Haikou"),count("G6PD", "Chinese_1"),count("G6PD", "Seattle_Lodi_Modena_Ferrara_II_Athens_like"),count("G6PD", "Bajo_Maumere"),count("G6PD", "Mizushima"),count("G6PD", "Osaka"),count("G6PD", "Montalbano"),count("G6PD", "Viangchan_Jammu"),count("G6PD", "Seoul"),count("G6PD", "Ludhiana"),count("G6PD", "Kalyan_Kerala_Jamnaga_Rohini"),count("G6PD", "Farroupilha"),count("G6PD", "Chatham"),count("G6PD", "Fushan"),count("G6PD", "Chinese_5"),count("G6PD", "Partenope"),count("G6PD", "Ierapetra"),count("G6PD", "Anadia"),count("G6PD", "Abeno"),count("G6PD", "Surabaya"),count("G6PD", "Pawnee"),count("G6PD", "S_Antioco"),count("G6PD", "Cassano"),count("G6PD", "Hermoupolis"),count("G6PD", "Union_Maewo_Chinese_2_Kalo"),count("G6PD", "Andalus"),count("G6PD", "Cosenza"),count("G6PD", "Canton_Taiwan_Hakka_Gifu_like_Agrigento_like"),count("G6PD", "G6PDNice"),count("G6PD", "Kamiube_Keelung"),count("G6PD", "Flores"),count("G6PD", "Kaiping_Anant_Dhon_Sapporo_like_Wosera"),count("G6PD", "Neapolis"),count("G6PD", "Split"),count("G6PD", "Honiara"),count("G6PD", "Sunderland"),count("G6PD", "Kozukata"),count("G6PD", "Amsterdam"),count("G6PD", "202G_A_376A_G_1264C_G"),count("G6PD", "Swansea"),count("G6PD", "Urayasu"),count("G6PD", "Vancouver"),count("G6PD", "Mt_Sinai"),count("G6PD", "Plymouth"),count("G6PD", "Volendam"),count("G6PD", "Shinshu"),count("G6PD", "Chikugo"),count("G6PD", "Tsukui"),count("G6PD", "Pedoplis_Ckaro"),count("G6PD", "Santiago"),count("G6PD", "Minnesota_Marion_Gastonia_LeJeune"),count("G6PD", "Cincinnati"),count("G6PD", "Harilaou"),count("G6PD", "North_Dallas"),count("G6PD", "Asahikawa"),count("G6PD", "Durham"),count("G6PD", "Stonybrook"),count("G6PD", "Wayne"),count("G6PD", "Aveiro"),count("G6PD", "Cleveland_Corum"),count("G6PD", "Lille"),count("G6PD", "Bangkok"),count("G6PD", "Sugao"),count("G6PD", "La_Jolla"),count("G6PD", "Wexham"),count("G6PD", "Piotrkow"),count("G6PD", "West_Virginia"),count("G6PD", "Omiya"),count("G6PD", "Nara"),count("G6PD", "Manhattan"),count("G6PD", "Rehevot"),count("G6PD", "Villeurbanne"),count("G6PD", "Torun"),count("G6PD", "Iwatsuki"),count("G6PD", "Serres"),count("G6PD", "Tondela"),count("G6PD", "Loma_Linda"),count("G6PD", "Aachen"),count("G6PD", "Tenri"),count("G6PD", "Montpellier"),count("G6PD", "Calvo_Mackenna"),count("G6PD", "Riley"),count("G6PD", "Olomouc"),count("G6PD", "Tomah"),count("G6PD", "Lynwood"),count("G6PD", "Madrid"),count("G6PD", "Iowa_Walter_Reed_Springfield"),count("G6PD", "Guadalajara"),count("G6PD", "Beverly_Hills_Genova_Iwate_Niigata_Yamaguchi"),count("G6PD", "Hartford"),count("G6PD", "Praha"),count("G6PD", "Krakow"),count("G6PD", "Wisconsin"),count("G6PD", "Nashville_Anaheim_Portici"),count("G6PD", "Alhambra"),count("G6PD", "Bari"),count("G6PD", "Puerto_Limon"),count("G6PD", "Covao_do_Lobo"),count("G6PD", "Clinic"),count("G6PD", "Utrecht"),count("G6PD", "Suwalki"),count("G6PD", "Riverside"),count("G6PD", "Japan_Shinagawa"),count("G6PD", "Kawasaki"),count("G6PD", "Munich"),count("G6PD", "Tokyo_Fukushima"),count("G6PD", "Georgia"),count("G6PD", "Sumare"),count("G6PD", "Telti_Kobe"),count("G6PD", "Santiago_de_Cuba_Morioka"),count("G6PD", "Harima"),count("G6PD", "Figuera_da_Foz"),count("G6PD", "Amiens"),count("G6PD", "Bangkok_Noi"),count("G6PD", "Fukaya"),count("G6PD", "Campinas"),count("G6PD", "Buenos_Aires"),count("G6PD", "Arakawa"),count("G6PD", "Brighton")) == 1))
or(sum(count("G6PD", "No_name"),count("G6PD", "Gidra"),count("G6PD", "Sierra_Leone"),count("G6PD", "Cairo"),count("G6PD", "Gond"),count("G6PD", "Dagua"),count("G6PD", "Papua"),count("G6PD", "Mediterranean_Haplotype"),count("G6PD", "Yunan"),count("G6PD", "Laibin")) >= 1,and(gender.female,sum(count("G6PD", "B_wildtype"),count("G6PD", "Sao_Borja"),count("G6PD", "Insuli"),count("G6PD", "A"),count("G6PD", "Mira_d_Aire")) == 1,sum(count("G6PD", "Honiara"),count("G6PD", "Sunderland"),count("G6PD", "Kozukata"),count("G6PD", "Amsterdam"),count("G6PD", "202G_A_376A_G_1264C_G"),count("G6PD", "Swansea"),count("G6PD", "Urayasu"),count("G6PD", "Vancouver"),count("G6PD", "Mt_Sinai"),count("G6PD", "Plymouth"),count("G6PD", "Volendam"),count("G6PD", "Shinshu"),count("G6PD", "Chikugo"),count("G6PD", "Tsukui"),count("G6PD", "Pedoplis_Ckaro"),count("G6PD", "Santiago"),count("G6PD", "Minnesota_Marion_Gastonia_LeJeune"),count("G6PD", "Cincinnati"),count("G6PD", "Harilaou"),count("G6PD", "North_Dallas"),count("G6PD", "Asahikawa"),count("G6PD", "Durham"),count("G6PD", "Stonybrook"),count("G6PD", "Wayne"),count("G6PD", "Aveiro"),count("G6PD", "Cleveland_Corum"),count("G6PD", "Lille"),count("G6PD", "Bangkok"),count("G6PD", "Sugao"),count("G6PD", "La_Jolla"),count("G6PD", "Wexham"),count("G6PD", "Piotrkow"),count("G6PD", "West_Virginia"),count("G6PD", "Omiya"),count("G6PD", "Nara"),count("G6PD", "Manhattan"),count("G6PD", "Rehevot"),count("G6PD", "Villeurbanne"),count("G6PD", "Torun"),count("G6PD", "Iwatsuki"),count("G6PD", "Serres"),count("G6PD", "Tondela"),count("G6PD", "Loma_Linda"),count("G6PD", "Aachen"),count("G6PD", "Tenri"),count("G6PD", "Montpellier"),count("G6PD", "Calvo_Mackenna"),count("G6PD", "Riley"),count("G6PD", "Olomouc"),count("G6PD", "Tomah"),count("G6PD", "Lynwood"),count("G6PD", "Madrid"),count("G6PD", "Iowa_Walter_Reed_Springfield"),count("G6PD", "Guadalajara"),count("G6PD", "Beverly_Hills_Genova_Iwate_Niigata_Yamaguchi"),count("G6PD", "Hartford"),count("G6PD", "Praha"),count("G6PD", "Krakow"),count("G6PD", "Wisconsin"),count("G6PD", "Nashville_Anaheim_Portici"),count("G6PD", "Alhambra"),count("G6PD", "Bari"),count("G6PD", "Puerto_Limon"),count("G6PD", "Covao_do_Lobo"),count("G6PD", "Clinic"),count("G6PD", "Utrecht"),count("G6PD", "Suwalki"),count("G6PD", "Riverside"),count("G6PD", "Japan_Shinagawa"),count("G6PD", "Kawasaki"),count("G6PD", "Munich"),count("G6PD", "Tokyo_Fukushima"),count("G6PD", "Georgia"),count("G6PD", "Sumare"),count("G6PD", "Telti_Kobe"),count("G6PD", "Santiago_de_Cuba_Morioka"),count("G6PD", "Harima"),count("G6PD", "Figuera_da_Foz"),count("G6PD", "Amiens"),count("G6PD", "Bangkok_Noi"),count("G6PD", "Fukaya"),count("G6PD", "Campinas"),count("G6PD", "Buenos_Aires"),count("G6PD", "Arakawa"),count("G6PD", "Brighton"),count("G6PD", "Sinnai"),count("G6PD", "Lages"),count("G6PD", "Gaohe"),count("G6PD", "Rignano"),count("G6PD", "Orissa"),count("G6PD", "Aures"),count("G6PD", "Kambos"),count("G6PD", "Kamogawa"),count("G6PD", "Palestrina"),count("G6PD", "Metaponto"),count("G6PD", "Costanzo"),count("G6PD", "Amazonia"),count("G6PD", "Musashino"),count("G6PD", "Songklanagarind"),count("G6PD", "Asahi"),count("G6PD", "Hechi"),count("G6PD", "A_202A_376G"),count("G6PD", "Namouru"),count("G6PD", "Murcia_Oristano"),count("G6PD", "Ube_Konan"),count("G6PD", "Lagosanto"),count("G6PD", "Malaga"),count("G6PD", "Guangzhou"),count("G6PD", "Hammersmith"),count("G6PD", "Bao_Loc"),count("G6PD", "Crispim"),count("G6PD", "Acrokorinthos"),count("G6PD", "Santa_Maria"),count("G6PD", "Ananindeua"),count("G6PD", "G6PD_A_680T_376G"),count("G6PD", "G6PD_A_968C_376G"),count("G6PD", "A"),count("G6PD", "Vanua_Lava"),count("G6PD", "Salerno_Pyrgos"),count("G6PD", "Quing_Yan"),count("G6PD", "Valladolid"),count("G6PD", "Belem"),count("G6PD", "Liuzhou"),count("G6PD", "Ilesha"),count("G6PD", "Shenzen"),count("G6PD", "Mahidol"),count("G6PD", "Taipei_Chinese_3"),count("G6PD", "Toledo"),count("G6PD", "Naone"),count("G6PD", "Nankang"),count("G6PD", "Miaoli"),count("G6PD", "Malaga"),count("G6PD", "Mediterranean_Dallas_Panama_Sassari_Cagliari_Birmingham"),count("G6PD", "Coimbra_Shunde"),count("G6PD", "Nilgiri"),count("G6PD", "Sibari"),count("G6PD", "Radlowo"),count("G6PD", "Mexico_City"),count("G6PD", "Nanning"),count("G6PD", "Roubaix"),count("G6PD", "Haikou"),count("G6PD", "Chinese_1"),count("G6PD", "Seattle_Lodi_Modena_Ferrara_II_Athens_like"),count("G6PD", "Bajo_Maumere"),count("G6PD", "Mizushima"),count("G6PD", "Osaka"),count("G6PD", "Montalbano"),count("G6PD", "Viangchan_Jammu"),count("G6PD", "Seoul"),count("G6PD", "Ludhiana"),count("G6PD", "Kalyan_Kerala_Jamnaga_Rohini"),count("G6PD", "Farroupilha"),count("G6PD", "Chatham"),count("G6PD", "Fushan"),count("G6PD", "Chinese_5"),count("G6PD", "Partenope"),count("G6PD", "Ierapetra"),count("G6PD", "Anadia"),count("G6PD", "Abeno"),count("G6PD", "Surabaya"),count("G6PD", "Pawnee"),count("G6PD", "S_Antioco"),count("G6PD", "Cassano"),count("G6PD", "Hermoupolis"),count("G6PD", "Union_Maewo_Chinese_2_Kalo"),count("G6PD", "Andalus"),count("G6PD", "Cosenza"),count("G6PD", "Canton_Taiwan_Hakka_Gifu_like_Agrigento_like"),count("G6PD", "G6PDNice"),count("G6PD", "Kamiube_Keelung"),count("G6PD", "Flores"),count("G6PD", "Kaiping_Anant_Dhon_Sapporo_like_Wosera"),count("G6PD", "Neapolis"),count("G6PD", "Split")) == 1))
not(or(G6PD_metabolizer.NM,G6PD_metabolizer.PM,G6PD_metabolizer.unknown))
DPYD_array = ["rs3918290","rs55886062","rs67376798","rs75017182","rs72549303","rs72549309","rs1801266","rs1801268","rs78060119","rs115232898"]DPYD_dict = {"rs3918290":"C|T","rs55886062":"A|C","rs67376798":"T|A","rs75017182":"G|C","rs72549303":"G|-","rs72549309":"ATGA|-","rs1801266":"G|A","rs1801268":"C|A","rs78060119":"C|A","rs115232898":"T|C"}DPYD_score_dict = {"rs3918290":0,"rs55886062":0,"rs67376798":0.5,"rs75017182":0.5,"rs72549303":0,"rs72549309":0,"rs1801266":0,"rs1801268":0,"rs78060119":0,"rs115232898":0.5}for rsID in DPYD_array:allele_1 = DPYD_dict[rsID].split("|")[0]allele_2 = DPYD_dict[rsID].split("|")[1]allele_score = DPYD_score_dict[rsID]if rsID in user_raw_data:a = count(allele_1) # reference non-pathogenic alleleb = count(allele_2) # alternative pathogenic alleleif a != 0:for i in range(a)final_scores.append(1.0)if b != 0:for i in range(b):final_scores.append(allele_score)final_scores_sorted = sort(final_scores, ascending)diplotype_score = sum(final_scores_sorted[0:2]) # sum first two members of the arrayif diplotype_score == 0:DPYD_metabolizer = activityZeroelif diplotype_score == 0.5:DPYD_metabolizer = activityHalfelif diplotype_score == 1.0:DPYD_metabolizer = activityOneelif diplotype_score == 1.5:DPYD_metabolizer = activityOneAndHalfelif diplotype_score == 2.0:DPYD_metabolizer = activityTwo
DPYD_array = ["rs3918290","rs55886062","rs67376798","rs75017182","rs72549303","rs72549309","rs1801266","rs1801268","rs78060119","rs115232898"]DPYD_dict = {"rs3918290":"C|T","rs55886062":"A|C","rs67376798":"T|A","rs75017182":"G|C","rs72549303":"G|-","rs72549309":"ATGA|-","rs1801266":"G|A","rs1801268":"C|A","rs78060119":"C|A","rs115232898":"T|C"}DPYD_score_dict = {"rs3918290":0,"rs55886062":0,"rs67376798":0.5,"rs75017182":0.5,"rs72549303":0,"rs72549309":0,"rs1801266":0,"rs1801268":0,"rs78060119":0,"rs115232898":0.5}for rsID in DPYD_array:allele_1 = DPYD_dict[rsID].split("|")[0]allele_2 = DPYD_dict[rsID].split("|")[1]allele_score = DPYD_score_dict[rsID]if rsID in user_raw_data:a = count(allele_1) # reference non-pathogenic alleleb = count(allele_2) # alternative pathogenic alleleif a != 0:for i in range(a)final_scores.append(1.0)if b != 0:for i in range(b):final_scores.append(allele_score)final_scores_sorted = sort(final_scores, ascending)diplotype_score = sum(final_scores_sorted[0:2]) # sum first two members of the arrayif diplotype_score == 0:DPYD_metabolizer = activityZeroelif diplotype_score == 0.5:DPYD_metabolizer = activityHalfelif diplotype_score == 1.0:DPYD_metabolizer = activityOneelif diplotype_score == 1.5:DPYD_metabolizer = activityOneAndHalfelif diplotype_score == 2.0:DPYD_metabolizer = activityTwo
DPYD_array = ["rs3918290","rs55886062","rs67376798","rs75017182","rs72549303","rs72549309","rs1801266","rs1801268","rs78060119","rs115232898"]DPYD_dict = {"rs3918290":"C|T","rs55886062":"A|C","rs67376798":"T|A","rs75017182":"G|C","rs72549303":"G|-","rs72549309":"ATGA|-","rs1801266":"G|A","rs1801268":"C|A","rs78060119":"C|A","rs115232898":"T|C"}DPYD_score_dict = {"rs3918290":0,"rs55886062":0,"rs67376798":0.5,"rs75017182":0.5,"rs72549303":0,"rs72549309":0,"rs1801266":0,"rs1801268":0,"rs78060119":0,"rs115232898":0.5}for rsID in DPYD_array:allele_1 = DPYD_dict[rsID].split("|")[0]allele_2 = DPYD_dict[rsID].split("|")[1]allele_score = DPYD_score_dict[rsID]if rsID in user_raw_data:a = count(allele_1) # reference non-pathogenic alleleb = count(allele_2) # alternative pathogenic alleleif a != 0:for i in range(a)final_scores.append(1.0)if b != 0:for i in range(b):final_scores.append(allele_score)final_scores_sorted = sort(final_scores, ascending)diplotype_score = sum(final_scores_sorted[0:2]) # sum first two members of the arrayif diplotype_score == 0:DPYD_metabolizer = activityZeroelif diplotype_score == 0.5:DPYD_metabolizer = activityHalfelif diplotype_score == 1.0:DPYD_metabolizer = activityOneelif diplotype_score == 1.5:DPYD_metabolizer = activityOneAndHalfelif diplotype_score == 2.0:DPYD_metabolizer = activityTwo
DPYD_array = ["rs3918290","rs55886062","rs67376798","rs75017182","rs72549303","rs72549309","rs1801266","rs1801268","rs78060119","rs115232898"]DPYD_dict = {"rs3918290":"C|T","rs55886062":"A|C","rs67376798":"T|A","rs75017182":"G|C","rs72549303":"G|-","rs72549309":"ATGA|-","rs1801266":"G|A","rs1801268":"C|A","rs78060119":"C|A","rs115232898":"T|C"}DPYD_score_dict = {"rs3918290":0,"rs55886062":0,"rs67376798":0.5,"rs75017182":0.5,"rs72549303":0,"rs72549309":0,"rs1801266":0,"rs1801268":0,"rs78060119":0,"rs115232898":0.5}for rsID in DPYD_array:allele_1 = DPYD_dict[rsID].split("|")[0]allele_2 = DPYD_dict[rsID].split("|")[1]allele_score = DPYD_score_dict[rsID]if rsID in user_raw_data:a = count(allele_1) # reference non-pathogenic alleleb = count(allele_2) # alternative pathogenic alleleif a != 0:for i in range(a)final_scores.append(1.0)if b != 0:for i in range(b):final_scores.append(allele_score)final_scores_sorted = sort(final_scores, ascending)diplotype_score = sum(final_scores_sorted[0:2]) # sum first two members of the arrayif diplotype_score == 0:DPYD_metabolizer = activityZeroelif diplotype_score == 0.5:DPYD_metabolizer = activityHalfelif diplotype_score == 1.0:DPYD_metabolizer = activityOneelif diplotype_score == 1.5:DPYD_metabolizer = activityOneAndHalfelif diplotype_score == 2.0:DPYD_metabolizer = activityTwo
DPYD_array = ["rs3918290","rs55886062","rs67376798","rs75017182","rs72549303","rs72549309","rs1801266","rs1801268","rs78060119","rs115232898"]DPYD_dict = {"rs3918290":"C|T","rs55886062":"A|C","rs67376798":"T|A","rs75017182":"G|C","rs72549303":"G|-","rs72549309":"ATGA|-","rs1801266":"G|A","rs1801268":"C|A","rs78060119":"C|A","rs115232898":"T|C"}DPYD_score_dict = {"rs3918290":0,"rs55886062":0,"rs67376798":0.5,"rs75017182":0.5,"rs72549303":0,"rs72549309":0,"rs1801266":0,"rs1801268":0,"rs78060119":0,"rs115232898":0.5}for rsID in DPYD_array:allele_1 = DPYD_dict[rsID].split("|")[0]allele_2 = DPYD_dict[rsID].split("|")[1]allele_score = DPYD_score_dict[rsID]if rsID in user_raw_data:a = count(allele_1) # reference non-pathogenic alleleb = count(allele_2) # alternative pathogenic alleleif a != 0:for i in range(a)final_scores.append(1.0)if b != 0:for i in range(b):final_scores.append(allele_score)final_scores_sorted = sort(final_scores, ascending)diplotype_score = sum(final_scores_sorted[0:2]) # sum first two members of the arrayif diplotype_score == 0:DPYD_metabolizer = activityZeroelif diplotype_score == 0.5:DPYD_metabolizer = activityHalfelif diplotype_score == 1.0:DPYD_metabolizer = activityOneelif diplotype_score == 1.5:DPYD_metabolizer = activityOneAndHalfelif diplotype_score == 2.0:DPYD_metabolizer = activityTwo
not(or(exists("rs3918290"),exists("rs55886062"),exists("rs67376798"),exists("rs75017182"),exists("rs72549303"),exists("rs72549309"),exists("rs1801266"),exists("rs1801268"),exists("rs78060119"),exists("rs115232898")))
